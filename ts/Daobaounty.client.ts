/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ExecMsg, Uint128, Addr, QueryMsg, QueryMsg1, AdminListResp, Bounty } from "./Daobaounty.types";
export interface DaobaountyReadOnlyInterface {
  contractAddress: string;
  getAdminList: () => Promise<AdminListResp>;
  getBounty: ({
    bountyId
  }: {
    bountyId: number;
  }) => Promise<Bounty>;
}
export class DaobaountyQueryClient implements DaobaountyReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getAdminList = this.getAdminList.bind(this);
    this.getBounty = this.getBounty.bind(this);
  }

  getAdminList = async (): Promise<AdminListResp> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_admin_list: {}
    });
  };
  getBounty = async ({
    bountyId
  }: {
    bountyId: number;
  }): Promise<Bounty> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bounty: {
        bounty_id: bountyId
      }
    });
  };
}
export interface DaobaountyInterface extends DaobaountyReadOnlyInterface {
  contractAddress: string;
  sender: string;
  addMember: ({
    admin
  }: {
    admin: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  issueBounty: ({
    donationDenom
  }: {
    donationDenom: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  contribute: ({
    amount,
    bountyId
  }: {
    amount: Uint128;
    bountyId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  issueAndContribute: ({
    amount,
    donationDenom
  }: {
    amount: Uint128;
    donationDenom: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  acceptFulfillment: ({
    amounts,
    bountyId,
    fulfillers
  }: {
    amounts: Uint128[];
    bountyId: number;
    fulfillers: Addr[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class DaobaountyClient extends DaobaountyQueryClient implements DaobaountyInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.addMember = this.addMember.bind(this);
    this.issueBounty = this.issueBounty.bind(this);
    this.contribute = this.contribute.bind(this);
    this.issueAndContribute = this.issueAndContribute.bind(this);
    this.acceptFulfillment = this.acceptFulfillment.bind(this);
  }

  addMember = async ({
    admin
  }: {
    admin: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_member: {
        admin
      }
    }, fee, memo, _funds);
  };
  issueBounty = async ({
    donationDenom
  }: {
    donationDenom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      issue_bounty: {
        donation_denom: donationDenom
      }
    }, fee, memo, _funds);
  };
  contribute = async ({
    amount,
    bountyId
  }: {
    amount: Uint128;
    bountyId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      contribute: {
        amount,
        bounty_id: bountyId
      }
    }, fee, memo, _funds);
  };
  issueAndContribute = async ({
    amount,
    donationDenom
  }: {
    amount: Uint128;
    donationDenom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      issue_and_contribute: {
        amount,
        donation_denom: donationDenom
      }
    }, fee, memo, _funds);
  };
  acceptFulfillment = async ({
    amounts,
    bountyId,
    fulfillers
  }: {
    amounts: Uint128[];
    bountyId: number;
    fulfillers: Addr[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_fulfillment: {
        amounts,
        bounty_id: bountyId,
        fulfillers
      }
    }, fee, memo, _funds);
  };
}